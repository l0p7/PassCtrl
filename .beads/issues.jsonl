{"id":"PassCtrl-1","title":"Adopt httpexpect and testify for integration testing","description":"Add external testing libraries to go.mod and document adoption prerequisites.","notes":"Pulled httpexpect/v2 v2.17.0 and testify v1.11.1 into go.mod; ready to close once integration harness refactors use them.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T02:33:39.347256005Z","updated_at":"2025-10-18T02:37:30.623313591Z","closed_at":"2025-10-18T02:37:30.623313591Z"}
{"id":"PassCtrl-10","title":"Migrate runtime tests to testify+mockery","description":"Refactor internal/runtime packages (admission, pipeline, cache, etc.) to use testify assertions and mockery where interfaces exist.","notes":"Replaced httptest servers in runtime suites with mockery-generated HTTP doers (internal/mocks/runtime) and refactored rule execution tests to rely on structured mocks. Runtime agents now run entirely under table-driven testify cases without binding local ports. Documented the shift in notes/testing-migration.md and validated with go test ./internal/runtime/... plus golangci-lint run ./...","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T05:07:42.03225354Z","updated_at":"2025-10-19T02:48:59.501351872Z","closed_at":"2025-10-19T02:48:59.501356607Z","dependencies":[{"issue_id":"PassCtrl-10","depends_on_id":"PassCtrl-9","type":"blocks","created_at":"2025-10-18T05:08:04.4801142Z","created_by":"l0p7"}]}
{"id":"PassCtrl-11","title":"Update HTTP-facing tests to httpexpect","description":"Ensure all integration/handler tests lean on httpexpect with table-driven layouts; cover remaining endpoints.","notes":"Reworked internal/server/router_test.go to drive the pipeline handler via httpexpect with table-driven coverage for auth, health, explain, and error paths. Added reusable httpexpect binder helper, reset logic for the stub pipeline, and assertions for endpoint hints and error messaging. go test ./... and golangci-lint run ./... both pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T05:07:46.202315323Z","updated_at":"2025-10-19T03:23:38.802555902Z","closed_at":"2025-10-19T03:23:38.802563639Z","dependencies":[{"issue_id":"PassCtrl-11","depends_on_id":"PassCtrl-10","type":"blocks","created_at":"2025-10-18T05:08:08.553828564Z","created_by":"l0p7"}]}
{"id":"PassCtrl-12","title":"Expand mockery coverage","description":"Add new interfaces (e.g., metrics recorders, template renderers) to .mockery.yml, generate mocks, and update tests accordingly.","notes":"Generated server PipelineHTTP mock via mockery and updated router tests to use expecters with httpexpect verification; go test ./... passes.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T05:07:50.177559616Z","updated_at":"2025-10-19T04:54:15.452002155Z","closed_at":"2025-10-19T04:54:15.452002155Z","dependencies":[{"issue_id":"PassCtrl-12","depends_on_id":"PassCtrl-10","type":"blocks","created_at":"2025-10-18T05:08:13.855812706Z","created_by":"l0p7"}]}
{"id":"PassCtrl-13","title":"Finalize documentation \u0026 lint updates","description":"Close PassCtrl-7 with final docs referencing new mock directories and testing conventions once migration completes.","notes":"README and docs/index.md now spell out cached golangci-lint invocation, mockery regen flow, and mock directory layout; golangci-lint run ./... passes.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-18T05:07:54.06591475Z","updated_at":"2025-10-19T05:03:08.526887425Z","closed_at":"2025-10-19T05:03:08.526887425Z","dependencies":[{"issue_id":"PassCtrl-13","depends_on_id":"PassCtrl-11","type":"blocks","created_at":"2025-10-18T05:08:20.271302801Z","created_by":"l0p7"}]}
{"id":"PassCtrl-14","title":"Table-drive admission agent tests","description":"Refactor internal/runtime/admission/agent_test.go to use a single table-driven harness with testify require/assert per case. Capture trusted proxy, development mode, forwarded metadata, and helper coverage in table rows. Update notes/testing-migration.md with the new table-driven structure under the Admission agent section. Run go test ./internal/runtime/admission... and golangci-lint once the refactor lands.","notes":"Converted internal/runtime/admission/agent_test.go into a unified table-driven suite covering untrusted proxy handling, development mode sanitisation, and helper utilities. Updated notes/testing-migration.md with the admission entry and validated with go test ./internal/runtime/admission plus shared golangci-lint run.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T02:07:24.94600795Z","updated_at":"2025-10-19T02:41:41.254850619Z","closed_at":"2025-10-19T02:41:41.254871911Z"}
{"id":"PassCtrl-15","title":"Table-drive forward \u0026 response policy tests","description":"Convert internal/runtime/forwardpolicy/agent_test.go and internal/runtime/responsepolicy/agent_test.go into table-driven suites that align with the Forward Request Policy and Response Policy agents described in design/system-agents.md. Factor shared setup helpers, express policy permutations as []struct cases, and ensure caching/rendering branches remain covered. Document the conversion in notes/testing-migration.md and verify go test ./internal/runtime/... plus golangci-lint succeed.","notes":"Refactored internal/runtime/forwardpolicy/agent_test.go and internal/runtime/responsepolicy/agent_test.go into table-driven testify cases covering header/query curation, proxy forwarding, outcome mapping, caching bypass, and clone helper behaviour. Documented progress in notes/testing-migration.md and verified with go test ./internal/runtime/forwardpolicy ./internal/runtime/responsepolicy and golangci-lint.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T02:07:34.501109397Z","updated_at":"2025-10-19T02:41:47.352639022Z","closed_at":"2025-10-19T02:41:47.352646108Z"}
{"id":"PassCtrl-16","title":"Table-drive configuration \u0026 CLI tests","description":"Restructure cmd/main_test.go, internal/config/loader_test.go, and internal/config/rules_loader_test.go into table-driven testify tests that capture server configuration precedence (env \u003e file \u003e default) and cache backend permutations. Ensure helper coverage (e.g., cacheEntry, rule bundle edge cases) is expressed through []struct definitions, update notes/testing-migration.md, and run go test ./cmd ./internal/config along with golangci-lint.","notes":"Consolidated cmd/main_test.go and internal/config/{loader,rules_loader}_test.go into table-driven suites that exercise cache backend selection, config precedence, rule bundle dedupe, and missing dependency guardrails. Added relevant migration notes and ran go test ./cmd ./internal/config alongside golangci-lint.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T02:07:38.011970357Z","updated_at":"2025-10-19T02:41:51.941386318Z","closed_at":"2025-10-19T02:41:51.941394118Z"}
{"id":"PassCtrl-17","title":"Table-drive templates, metrics, and expr tests","description":"Convert internal/templates/renderer_test.go, internal/templates/sandbox_test.go, internal/metrics/metrics_test.go, and internal/expr/env_test.go to table-driven testify suites. Cover sandbox resolution, env allowlists, renderer failure modes, Prometheus recorder expectations, and CEL helpers via structured test tables. Note the changes in notes/testing-migration.md and confirm go test ./internal/templates ./internal/metrics ./internal/expr plus golangci-lint.","notes":"Table-drove internal/templates/{renderer,sandbox}_test.go, internal/metrics/metrics_test.go, and internal/expr/env_test.go to cover sandbox boundaries, env allowlists, Prometheus metrics, and CEL helpers under structured cases. Reflected status in notes/testing-migration.md and validated with go test ./internal/templates ./internal/metrics ./internal/expr plus golangci-lint.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T02:07:41.594304531Z","updated_at":"2025-10-19T02:41:56.169756772Z","closed_at":"2025-10-19T02:41:56.169762118Z"}
{"id":"PassCtrl-18","title":"Introduce pipeline.Agent mock for runtime tests","description":"Generate mock for pipeline.Agent interface so runtime tests can assert Execute call order and failure paths without hand-rolled stubs.","notes":"Added mockery support for pipeline.Agent (internal/mocks/pipeline/agent_mock.go) and refactored runtime_additional_test.go to assert instrumentation via mocks.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T11:41:20.821167951Z","updated_at":"2025-10-19T11:53:38.187108771Z","closed_at":"2025-10-19T11:53:38.187117285Z"}
{"id":"PassCtrl-19","title":"Add CLI main failure-path tests with factory seams","description":"Extract loader/server/cache factories behind interfaces so cmd/main.go error paths can be unit tested via mocks.","notes":"Introduced injectable factories in cmd/main.go (run function) and added failure-path unit tests for loader/server errors.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T11:41:26.171313111Z","updated_at":"2025-10-19T11:53:45.508884502Z","closed_at":"2025-10-19T11:53:45.508891476Z"}
{"id":"PassCtrl-2","title":"Refactor integration harness to use httpexpect and table-driven cases","description":"Rewrite cmd/integration_test.go to drive HTTP expectations via httpexpect/v2 and assertions via testify.","notes":"Reworked TestIntegrationServerStartup into table-driven httpexpect flow with testify validation.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T02:33:42.105157455Z","updated_at":"2025-10-18T02:37:34.424698354Z","closed_at":"2025-10-18T02:37:34.424698354Z","dependencies":[{"issue_id":"PassCtrl-2","depends_on_id":"PassCtrl-1","type":"blocks","created_at":"2025-10-18T02:33:48.706779335Z","created_by":"l0p7"}]}
{"id":"PassCtrl-20","title":"Mock metrics recorder for pipeline log assertions","description":"Introduce metrics Recorder interface \u0026 mock so runtime tests can assert emitted labels without parsing Prometheus histograms.","notes":"Introduced Recorder interface with mockery support, updated runtime to accept interfaces, and added metrics interaction tests using the new mock.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-19T11:41:33.801945541Z","updated_at":"2025-10-19T21:27:24.140031055Z","closed_at":"2025-10-19T21:27:24.14003827Z"}
{"id":"PassCtrl-21","title":"Document no-mock decision for template sandbox tests","description":"Record in notes that template sandbox tests should continue using real filesystem interactions (no mock FS).","notes":"Template sandbox tests intentionally manipulate temp directories; mocking FS would miss path jail bugs.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-19T11:41:46.140427227Z","updated_at":"2025-10-19T11:41:56.135722049Z","closed_at":"2025-10-19T11:41:56.13572803Z"}
{"id":"PassCtrl-22","title":"Avoid mocking httpexpect integration flows","description":"Note that httpexpect-backed integration tests should keep real handlers to preserve behaviour coverage; mocks would undercut signal.","notes":"Integration harness should keep real HTTP flows; mocks would erode end-to-end confidence.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-19T11:41:51.255138401Z","updated_at":"2025-10-19T11:42:00.929282372Z","closed_at":"2025-10-19T11:42:00.929290428Z"}
{"id":"PassCtrl-23","title":"Migrate docs site to Jekyll","description":"Install Jekyll scaffolding in docs/, including _config.yml, default layout, and navigation so the site no longer depends on mkdocs.","notes":"Migrated the docs site to Jekyll with staged navigation (_config.yml, layouts, data) and replaced the MkDocs landing page with the staged index.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-20T08:14:33.335838972Z","updated_at":"2025-10-21T21:02:13.893421651Z","closed_at":"2025-10-21T21:02:13.893428129Z"}
{"id":"PassCtrl-24","title":"Stage documentation into deployment, endpoints, and rules guides","description":"Rewrite user-facing docs so content is separated into deployment, endpoint configuration, and rule configuration guides with clear upstream/response behavior tables.","notes":"Split operator docs into staged guides for deployment, endpoints, rules, and flows with cross-links and refreshed content per stage.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-20T08:14:37.421035345Z","updated_at":"2025-10-21T21:02:21.400597254Z","closed_at":"2025-10-21T21:02:21.400605619Z"}
{"id":"PassCtrl-25","title":"Document request flows with diagrams and examples","description":"Add flow diagrams and worked examples that connect configuration settings to upstream requests and downstream responses.","notes":"Expanded Stage 4 with mermaid decision diagrams, hot-reload sequence, and aligned examples referencing flows.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T08:14:41.350638472Z","updated_at":"2025-10-21T21:02:30.467381062Z","closed_at":"2025-10-21T21:02:30.467387136Z"}
{"id":"PassCtrl-26","title":"Align examples with deployment guide","description":"Audit examples/configs and suites to ensure they mirror scenarios documented in Stage 1 deployment guide, updating README pointers as needed.","notes":"Reworked examples/README to map scenarios to doc stages and ensured docker-compose sample mirrors deployment guidance.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T09:39:59.686796939Z","updated_at":"2025-10-21T21:02:36.276511397Z","closed_at":"2025-10-21T21:02:36.276519335Z"}
{"id":"PassCtrl-27","title":"Curate rule and endpoint examples for staged docs","description":"Ensure examples/ suites demonstrate endpoint and rule configurations referenced in Stage 2/3 docs, including cache, forward policy, and response templates.","notes":"Tuned configs and suites to use staged schema (forward policies, caches, variables) and linked them from Stage 2/3 docs.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T09:40:03.594947783Z","updated_at":"2025-10-21T21:02:42.504397408Z","closed_at":"2025-10-21T21:02:42.504404986Z"}
{"id":"PassCtrl-28","title":"Document conditional logic usage with examples","description":"Expand Stage 3 rule documentation with a dedicated section covering CEL predicates, helper functions, and sample configurations illustrating pass/fail/error conditions.","notes":"Added a conditional logic deep-dive covering CEL activation keys, common predicates, tips, and referencing the token introspection example.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T09:44:54.241651445Z","updated_at":"2025-10-21T21:02:48.843082518Z","closed_at":"2025-10-21T21:02:48.843090913Z"}
{"id":"PassCtrl-29","title":"Document design vs runtime divergence","description":"Capture mismatches between design docs/README and current pipeline: admission ignores endpoint auth, rule config fields unused, caching TTL semantics missing.","notes":"Investigation completed (2025-10-26). Found the following divergences:\n\n**RESOLVED:**\n- ❌ \"admission ignores endpoint auth\" - FALSE. Admission agent properly enforces endpoint authentication config. Issue was stale documentation, fixed in PassCtrl-30.\n\n**ACTIVE DIVERGENCES:**\n1. ✅ Rule-level cache config defined but unused:\n   - Config types exist: RuleCacheConfig{FollowCacheControl, PassTTL, FailTTL} (internal/config/types.go:235-239)\n   - Example configs reference these fields (e.g., examples/configs/backend-token-introspection.yaml:105-107)\n   - Runtime compilation ignores cfg.Cache entirely (internal/runtime/runtime.go:884-920)\n   - No buildRuleCacheSpec() function exists\n   - PassCtrl-33 tracks implementation\n\n2. ⚠️ Caching TTL semantics partially missing:\n   - Endpoint-level resultTTL works (internal/runtime/runtime.go:723-774)\n   - Rule-level passTTL/failTTL not implemented (different TTLs per outcome)\n   - Rule-level followCacheControl not implemented (honor backend Cache-Control)\n   - Design docs (design/decision-model.md:69-77) describe full semantics\n   - PassCtrl-33 tracks implementation\n\n**ACTION REQUIRED:**\nUpdate design docs or implement missing features per PassCtrl-33.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-21T21:23:14.289710976Z","updated_at":"2025-10-26T04:42:54.634553119Z"}
{"id":"PassCtrl-3","title":"Document new testing stack and validate","description":"Update DEPENDENCIES.md and run go test to confirm integration harness works with new libraries.","notes":"Documented httpexpect/testify in DEPENDENCIES.md and ran go test ./....","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T02:33:46.096642253Z","updated_at":"2025-10-18T02:37:37.231351482Z","closed_at":"2025-10-18T02:37:37.231351482Z","dependencies":[{"issue_id":"PassCtrl-3","depends_on_id":"PassCtrl-2","type":"blocks","created_at":"2025-10-18T02:33:52.601567917Z","created_by":"l0p7"}]}
{"id":"PassCtrl-30","title":"Enforce endpoint admission configuration in runtime","description":"Admission agent must honor endpoint.authentication (allow lists, challenges, WWW-Authenticate) before rule chain executes. Integrate credentials beyond bare Authorization header, emit challenge responses, update tests and docs.","notes":"Admission agent now enforces endpoint authentication allow providers, captures matched credentials, and emits WWW-Authenticate challenges.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-22T10:01:01.186444838Z","updated_at":"2025-10-26T04:51:10.023347648Z","closed_at":"2025-10-26T04:51:10.023347648Z"}
{"id":"PassCtrl-31","title":"Implement rule auth, responses, and variable propagation","description":"Extend rule compilation/execution to use rule.auth directives for backend credential forwarding, apply rule.response status/body/header templates, and populate scoped variables in activation and templates. Update tests to cover CEL activations \u0026 templates.","notes":"Rule-level responses now restrict to header directives; runtime rejects status/body overrides, examples/docs updated, and PassCtrl-34 filed to clean up config schema.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-22T10:01:06.977614884Z","updated_at":"2025-10-25T23:28:23.752148019Z"}
{"id":"PassCtrl-32","title":"Support templated custom headers/query in forward policy","description":"Forward request and backend policy should render custom header/query values via template renderer (with Sprig) instead of treating them as static strings. Ensure consistent behavior across forward policy and backend apply, add tests.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T10:01:11.89272356Z","updated_at":"2025-10-22T10:01:11.89272356Z"}
{"id":"PassCtrl-33","title":"Honor rule and endpoint cache directives","description":"Result caching should respect rule.cache passTTL/failTTL, followCacheControl, and endpoint cache coordination. Implement TTL selection per outcome, avoid caching 5xx, expose metadata in metrics/logs, and add tests.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-22T10:01:20.313634645Z","updated_at":"2025-10-22T10:01:20.313634645Z"}
{"id":"PassCtrl-34","title":"Deprecate rule response status/body config fields","description":"Now that runtime ignores rule-level status/body overrides, remove these fields from config types/CLI validation and document migration guidance.","notes":"Status/body overrides removed from runtime, config schema, and docs; endpoint policy now owns response codes/bodies.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T23:27:58.061087678Z","updated_at":"2025-10-25T23:47:53.644866415Z","closed_at":"2025-10-25T23:47:53.644866415Z"}
{"id":"PassCtrl-35","title":"Allow composing multiple forwardAs transforms per rule auth directive","description":"Explore supporting multiple forwardAs blocks (e.g., emit header + bearer token) on a single rule auth matcher; assess config ergonomics, runtime implications, and backward compatibility.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-25T23:58:48.371518437Z","updated_at":"2025-10-25T23:58:48.371518437Z"}
{"id":"PassCtrl-36","title":"Revisit rule variable block ergonomics","description":"Evaluate whether the current variables.global/rule/local structure meets real usage needs; consider templating ergonomics, CEL activation cost, and potential aliasing helpers.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T00:02:09.784613073Z","updated_at":"2025-10-26T00:02:09.784613073Z"}
{"id":"PassCtrl-37","title":"Design backend interaction agent","description":"Draft a design for separating backendApi execution from the rule agent: define agent responsibilities, state hand-off (auth selection, pagination data, caching hooks), observability, and migration steps. Once design is accepted, implement the dedicated agent and update tests.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T00:05:11.257168326Z","updated_at":"2025-10-26T00:05:11.257168326Z"}
{"id":"PassCtrl-38","title":"Reassess response policy after variable/forwardAs updates","description":"After variable scope and forwardAs work lands, re-evaluate endpoint vs rule response handling: confirm header layering, status/body ownership, and whether additional templating contexts are needed.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T00:38:13.190309124Z","updated_at":"2025-10-26T00:38:13.190309124Z"}
{"id":"PassCtrl-39","title":"Implement endpoint variable evaluation","description":"Implement endpoint-level variables that are evaluated once per request and available to all rules.\n\nEndpoint variables support both CEL and Go templates (detected by presence of {{):\n- CEL: request.remoteAddr, request.method, request.path, request.headers[\"name\"]\n- Template: {{ .request.headers.x-tenant }}, {{ env \"VAR\" }}\n\nVariables are evaluated before rule execution and stored in context as .vars.*\n\nConfig schema:\n```yaml\nendpoints:\n  api-gateway:\n    variables:\n      api_base: \"https://api.internal\"\n      tenant: \"{{ .request.headers.x-tenant-id }}\"\n      client_ip: request.remoteAddr\n```\n\nSee design/variable-architecture-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:07:14.486234891Z","updated_at":"2025-10-26T11:20:08.504497916Z","closed_at":"2025-10-26T11:20:08.504497916Z"}
{"id":"PassCtrl-4","title":"Enable testify linting","description":"Update golangci configuration to include testify lints after adopting testify","notes":"Added testify linter to .golangci.yml enable list.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T02:42:09.768963663Z","updated_at":"2025-10-18T02:43:19.803374219Z","closed_at":"2025-10-18T02:43:19.803374219Z"}
{"id":"PassCtrl-40","title":"Implement local variable evaluation in rules (hybrid CEL/Template)","description":"Implement rule-scoped local variables that support both CEL and Go templates.\n\nDetection: If expression contains {{ then use template, else use CEL.\n\nLocal variables:\n- Evaluated after backend call\n- Available within rule for conditions and exported variables\n- NOT exported to other rules\n- NOT cached\n\nConfig schema:\n```yaml\nrules:\n  lookup-user:\n    variables:\n      user_id: backend.body.userId  # CEL - preserves type\n      full_name: \"{{ .backend.body.first }} {{ .backend.body.last }}\"  # Template\n      is_active: backend.body.status == \"active\"  # CEL boolean\n```\n\nContext available:\n- backend.body.*, backend.status, backend.headers.*\n- auth.input.*, auth.output.*\n- vars.* (endpoint variables)\n- request.*\n\nSee design/variable-architecture-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:07:25.017662218Z","updated_at":"2025-10-26T11:29:36.519284894Z","closed_at":"2025-10-26T11:29:36.519284894Z","dependencies":[{"issue_id":"PassCtrl-40","depends_on_id":"PassCtrl-39","type":"blocks","created_at":"2025-10-26T11:07:25.032260582Z","created_by":"l0p7"}]}
{"id":"PassCtrl-41","title":"Implement exported variable rendering in rule responses","description":"Implement exported variables that are rendered from responses.\u003coutcome\u003e.variables and shared with subsequent rules.\n\nOnly the winning outcome's variables are exported and cached.\n\nConfig schema:\n```yaml\nrules:\n  lookup-user:\n    variables:\n      temp_id: backend.body.userId  # Local only\n    responses:\n      pass:\n        variables:\n          user_id: variables.temp_id  # Exported - CEL\n          email: \"{{ .variables.temp_email | lower }}\"  # Exported - Template\n      fail:\n        variables:\n          error: \"auth_failed\"  # Different exports on fail\n```\n\nExported variables:\n- Accessible to subsequent rules as .rules.\u003crule-name\u003e.variables.*\n- Cached with rule outcome\n- Support both CEL and Template rendering\n\nSee design/variable-architecture-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:07:34.794167708Z","updated_at":"2025-10-26T11:52:20.39993399Z","closed_at":"2025-10-26T11:52:20.39993399Z","dependencies":[{"issue_id":"PassCtrl-41","depends_on_id":"PassCtrl-40","type":"blocks","created_at":"2025-10-26T11:07:34.806647637Z","created_by":"l0p7"}]}
{"id":"PassCtrl-42","title":"Implement backend request descriptor hashing for cache keys","description":"Implement canonical backend request hashing for per-rule cache keys.\n\nBackend descriptor includes:\n- Method (GET, POST, etc.)\n- URL (after template rendering with endpoint vars + upstream exports)\n- Custom headers (after template rendering, sorted)\n- Request body (after template rendering)\n\nHashing:\n- Deterministic canonicalization (sorted headers)\n- SHA256 hash\n- Hex encoded\n\nCache key component: backend-hash\n\n```go\ntype BackendDescriptor struct {\n    Method  string\n    URL     string\n    Headers map[string]string\n    Body    string\n}\n\nfunc (d BackendDescriptor) Hash() string {\n    // Canonical string with sorted headers\n    // SHA256 hash\n    // Return hex string\n}\n```\n\nSee design/per-rule-caching-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:07:44.678332259Z","updated_at":"2025-10-27T09:43:54.779062015Z","closed_at":"2025-10-27T09:43:54.779062015Z","dependencies":[{"issue_id":"PassCtrl-42","depends_on_id":"PassCtrl-41","type":"blocks","created_at":"2025-10-26T11:07:44.690367641Z","created_by":"l0p7"}]}
{"id":"PassCtrl-43","title":"Implement upstream variables hashing for strict cache mode","description":"Implement hashing of all upstream exported variables for strict cache invalidation.\n\nWhen cache.strict=true (default), include hash of all previous rules' exported variables in cache key.\n\nHashing:\n- Sort rule names deterministically\n- Sort variable names within each rule\n- Canonical format: ruleName.varName=value|\n- SHA256 hash\n- Hex encoded\n\nCache key component: upstream-vars-hash (only when strict=true)\n\n```go\nfunc hashUpstreamVariables(upstreamVars map[string]map[string]any) string {\n    // Sort rule names\n    // For each rule, sort variable names\n    // Build canonical string\n    // SHA256 hash\n    // Return hex string\n}\n```\n\nBehavior:\n- strict=true: Any upstream variable change → cache miss\n- strict=false: Only backend request matters\n\nSee design/per-rule-caching-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:07:54.638158204Z","updated_at":"2025-10-27T09:52:18.357955914Z","closed_at":"2025-10-27T09:52:18.357955914Z","dependencies":[{"issue_id":"PassCtrl-43","depends_on_id":"PassCtrl-41","type":"blocks","created_at":"2025-10-26T11:07:54.650199422Z","created_by":"l0p7"}]}
{"id":"PassCtrl-44","title":"Implement Cache-Control header parsing","description":"Implement parsing of backend Cache-Control headers to derive TTL when followCacheControl=true.\n\nSupported directives:\n- max-age=\u003cseconds\u003e\n- s-maxage=\u003cseconds\u003e (preferred for shared caches)\n- no-cache (TTL=0)\n- no-store (TTL=0)\n- private (TTL=0)\n\nPrecedence:\n1. s-maxage (shared cache directive)\n2. max-age\n3. Don't cache directives → 0\n\n```go\ntype CacheControlDirective struct {\n    MaxAge   *int\n    SMaxAge  *int\n    NoCache  bool\n    NoStore  bool\n    Private  bool\n}\n\nfunc parseCacheControl(header string) CacheControlDirective\nfunc (d CacheControlDirective) GetTTL() *time.Duration\n```\n\nCache-Control takes precedence over manual TTL when followCacheControl=true.\n\nSee design/per-rule-caching-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:08:03.764805091Z","updated_at":"2025-10-27T10:09:26.966879479Z","closed_at":"2025-10-27T10:09:26.966879479Z"}
{"id":"PassCtrl-45","title":"Implement cache TTL ceiling hierarchy (server \u003e endpoint \u003e rule)","description":"Implement TTL ceiling calculation where server and endpoint set upper bounds for rule caching.\n\nHierarchy:\n1. Error outcomes → Always 0 (hardcoded)\n2. Backend Cache-Control (if followCacheControl=true)\n3. Rule manual TTL\n4. Endpoint TTL ceiling\n5. Server max TTL ceiling\n\nEffective TTL = min(server.maxTTL, endpoint.cache.ttl.\u003coutcome\u003e, rule.cache.ttl.\u003coutcome\u003e, backend-cache-control)\n\nConfig:\n```yaml\nserver:\n  cache:\n    maxTTL: \"1h\"  # Global ceiling\n\nendpoints:\n  api-gateway:\n    cache:\n      ttl:\n        pass: \"10m\"  # Endpoint ceiling\n\nrules:\n  fetch-user:\n    cache:\n      followCacheControl: true\n      ttl:\n        pass: \"5m\"  # Actual, capped by endpoint (10m) and server (1h)\n```\n\nFunction:\n```go\nfunc calculateEffectiveTTL(\n    outcome string,\n    serverMaxTTL time.Duration,\n    endpointTTL RuleCacheTTLConfig,\n    ruleConfig RuleCacheConfig,\n    backendHeaders map[string]string,\n) time.Duration\n```\n\nSee design/per-rule-caching-v2.md for complete spec.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:08:16.398087869Z","updated_at":"2025-10-27T10:24:32.031821055Z","closed_at":"2025-10-27T10:24:32.031821055Z","dependencies":[{"issue_id":"PassCtrl-45","depends_on_id":"PassCtrl-44","type":"blocks","created_at":"2025-10-26T11:08:16.409214832Z","created_by":"l0p7"}]}
{"id":"PassCtrl-46","title":"Integrate per-rule caching into rule execution agent","description":"Move cache operations from pipeline into rule_execution_agent for per-rule caching.\n\nPer-rule caching flow:\n1. Render backend request (uses endpoint vars + upstream exports)\n2. Build cache key: credential | endpoint | path | rule-name | backend-hash | upstream-vars-hash\n3. Cache lookup\n4. If HIT: Restore outcome + exported variables, skip backend\n5. If MISS: Execute backend, evaluate conditions, render exports, cache result\n\nCache entry structure:\n```go\ntype RuleCacheEntry struct {\n    Outcome      string\n    Reason       string\n    Exported     map[string]any  // Only winning outcome's variables\n    Headers      map[string]string\n    StoredAt     time.Time\n    ExpiresAt    time.Time\n}\n```\n\nOnly cache when:\n- Rule has backendApi defined\n- Outcome is pass or fail (never error)\n- TTL \u003e 0 (after ceiling calculation)\n\nDependencies: PassCtrl-42, PassCtrl-43, PassCtrl-45\n\nSee design/per-rule-caching-v2.md for complete spec.","notes":"SPLIT INTO TWO ISSUES: PassCtrl-51 (rendering refactor) and PassCtrl-52 (cache integration). Both must be completed to fulfill this requirement. The foundational infrastructure (rule_cache.go with RuleCacheEntry type, cache key building, lookup/store functions) has been created.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-26T11:08:29.383991549Z","updated_at":"2025-10-27T10:30:35.178870945Z","closed_at":"2025-10-27T10:30:35.178870945Z","dependencies":[{"issue_id":"PassCtrl-46","depends_on_id":"PassCtrl-42","type":"blocks","created_at":"2025-10-26T11:08:29.395008073Z","created_by":"l0p7"},{"issue_id":"PassCtrl-46","depends_on_id":"PassCtrl-43","type":"blocks","created_at":"2025-10-26T11:08:29.407950853Z","created_by":"l0p7"},{"issue_id":"PassCtrl-46","depends_on_id":"PassCtrl-45","type":"blocks","created_at":"2025-10-26T11:08:29.426057557Z","created_by":"l0p7"}]}
{"id":"PassCtrl-47","title":"Remove endpoint-level cache lookups from pipeline","description":"Remove the endpoint-level cache lookup that happens before rule execution.\n\nChanges:\n- Remove cache lookup in runtime.go (before rule chain executes)\n- Remove resultcaching agent from pipeline\n- Keep endpoint.cache.ttl as ceiling config only (not a cache layer)\n- Remove state.Cache.Hit short-circuit in rulechain agent\n\nEndpoint cache config becomes validation ceiling, not active caching.\n\nThe only caching is per-rule within rule_execution_agent.\n\nDependencies: PassCtrl-46\n\nFiles to modify:\n- internal/runtime/runtime.go\n- internal/runtime/rulechain/agent.go\n- Remove resultcaching agent from pipeline construction","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T11:08:39.07238274Z","updated_at":"2025-10-26T11:08:39.07238274Z","dependencies":[{"issue_id":"PassCtrl-47","depends_on_id":"PassCtrl-46","type":"blocks","created_at":"2025-10-26T11:08:39.085428495Z","created_by":"l0p7"}]}
{"id":"PassCtrl-48","title":"Update config validation for new variable and cache schemas","description":"Update config validation to support new variable and cache schemas.\n\nChanges needed:\n1. Remove validation for old RuleVariablesConfig.Global/Rule/Local (now map[string]string)\n2. Add validation for endpoint.variables (map[string]string)\n3. Add validation for responses.*.variables (map[string]string)\n4. Update cache config validation for new TTL structure (cache.ttl.pass/fail/error)\n5. Validate cache.strict field\n6. Validate server.cache.maxTTL\n\nValidation rules:\n- Endpoint variables: CEL or Template expressions\n- Rule local variables: CEL or Template expressions\n- Exported variables: CEL or Template expressions\n- TTL values: Valid duration strings or \"0s\"\n- cache.strict: Optional boolean (defaults to true)\n\nFiles:\n- internal/config/rules_loader.go\n- internal/config/types.go (validation methods)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T11:08:50.823387231Z","updated_at":"2025-10-26T11:08:50.823387231Z","dependencies":[{"issue_id":"PassCtrl-48","depends_on_id":"PassCtrl-47","type":"blocks","created_at":"2025-10-26T11:08:50.836219311Z","created_by":"l0p7"}]}
{"id":"PassCtrl-49","title":"Migrate all example configs to new variable and cache schemas","description":"Migrate all example configuration files to use the new variable and cache schemas.\n\nOld schema:\n```yaml\nrules:\n  lookup-user:\n    variables:\n      global:\n        user_id:\n          from: backend.body.userId\n    cache:\n      passTTL: \"5m\"\n      failTTL: \"30s\"\n```\n\nNew schema:\n```yaml\nrules:\n  lookup-user:\n    variables:\n      temp_id: backend.body.userId\n    responses:\n      pass:\n        variables:\n          user_id: variables.temp_id\n    cache:\n      ttl:\n        pass: \"5m\"\n        fail: \"30s\"\n        error: \"0s\"\n      strict: true\n```\n\nFiles to migrate:\n- examples/configs/*.yaml (7 files)\n- examples/suites/*/rules.yaml\n- examples/suites/*/server.yaml\n\nAdd endpoint variables where appropriate.\nUpdate cache config to new TTL structure.\nMove variable exports to responses section.\n\nDependencies: PassCtrl-48","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T11:09:00.452592231Z","updated_at":"2025-10-26T11:09:00.452592231Z","dependencies":[{"issue_id":"PassCtrl-49","depends_on_id":"PassCtrl-48","type":"blocks","created_at":"2025-10-26T11:09:00.466899889Z","created_by":"l0p7"}]}
{"id":"PassCtrl-5","title":"Define testify migration plan","description":"Survey existing unit and integration tests, list conversions to testify require/assert and table-driven layouts while retaining httpexpect for HTTP interactions.","notes":"Drafted testing migration roadmap in notes/testing-migration.md covering audit and conversion phases.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T02:57:24.905441896Z","updated_at":"2025-10-18T05:22:21.702973465Z","closed_at":"2025-10-18T05:22:21.702973465Z"}
{"id":"PassCtrl-50","title":"Add comprehensive tests for per-rule caching","description":"Add comprehensive test coverage for per-rule caching architecture.\n\nTest areas:\n\n1. **Backend descriptor hashing:**\n   - Same request → same hash\n   - Different URL → different hash\n   - Different headers → different hash\n   - Header order doesn't matter (sorted)\n\n2. **Upstream variables hashing:**\n   - Same variables → same hash\n   - Variable value change → different hash\n   - Variable order doesn't matter (sorted)\n   - strict=true includes upstream hash, strict=false doesn't\n\n3. **Cache-Control parsing:**\n   - max-age directive\n   - s-maxage precedence\n   - no-cache/no-store/private → 0\n   - Missing header → fallback to manual TTL\n\n4. **TTL ceiling hierarchy:**\n   - Server ceiling enforced\n   - Endpoint ceiling enforced\n   - Rule TTL used when under ceilings\n   - Backend Cache-Control capped by ceilings\n   - Error outcomes always 0\n\n5. **Per-rule caching integration:**\n   - Cache hit skips backend\n   - Cache miss executes backend\n   - Exported variables cached and restored\n   - Upstream variable changes invalidate (strict mode)\n   - Upstream changes don't invalidate (loose mode)\n   - Only rules with backendApi are cached\n\nDependencies: PassCtrl-47, PassCtrl-49","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T11:09:12.395725959Z","updated_at":"2025-10-26T11:09:12.395725959Z","dependencies":[{"issue_id":"PassCtrl-50","depends_on_id":"PassCtrl-47","type":"blocks","created_at":"2025-10-26T11:09:12.40929976Z","created_by":"l0p7"},{"issue_id":"PassCtrl-50","depends_on_id":"PassCtrl-49","type":"blocks","created_at":"2025-10-26T11:09:12.423128244Z","created_by":"l0p7"}]}
{"id":"PassCtrl-51","title":"Refactor backend rendering to separate concerns (render before invoke)","description":"Refactor invokeBackend in rule_execution_agent to separate template rendering from HTTP execution.\n\nCurrent problem:\n- Templates (URL, headers, body) are rendered DURING the backend call\n- Per-rule caching needs to hash the rendered request BEFORE calling\n- This creates a circular dependency\n\nSolution:\nExtract rendering into separate function that returns a RenderedBackendRequest:\n\n```go\ntype RenderedBackendRequest struct {\n    URL     string\n    Method  string\n    Headers map[string]string\n    Body    string\n}\n\nfunc renderBackendRequest(\n    ctx context.Context,\n    backend rulechain.BackendDefinition,\n    authSel *ruleAuthSelection,\n    state *pipeline.State,\n) (RenderedBackendRequest, error) {\n    // Render URL template\n    // Render header templates\n    // Render body template\n    // Apply auth selection\n    // Return fully-rendered request\n}\n```\n\nModify invokeBackend to:\n1. Accept RenderedBackendRequest\n2. Build HTTP request from rendered values\n3. Execute and handle pagination\n\nThis allows cache key building before backend invocation.\n\nFiles to modify:\n- internal/runtime/rule_execution_agent.go (invokeBackend, evaluateRule)\n- internal/runtime/rule_cache.go (buildBackendHash)","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T10:30:19.137769171Z","updated_at":"2025-10-27T20:56:13.594335605Z","closed_at":"2025-10-27T20:56:13.594335605Z"}
{"id":"PassCtrl-52","title":"Integrate per-rule caching with proper backend hashing","description":"Integrate per-rule caching into rule_execution_agent using the refactored rendering.\n\nIntegration points in evaluateRule():\n1. Before backend invocation:\n   - Render backend request using renderBackendRequest() from PassCtrl-46a\n   - Build cache key using buildRuleCacheKey() with proper backend hash\n   - Lookup cache with lookupRuleCache()\n   - If HIT: Restore outcome + exported variables, return early\n\n2. After successful execution:\n   - Calculate effective TTL using CalculateEffectiveTTL() from PassCtrl-45\n   - Store result with storeRuleCache()\n\nAgent modifications:\n- Add cache.DecisionCache field to ruleExecutionAgent\n- Add server/endpoint TTL ceiling parameters\n- Pass cache backend and config through constructor\n\nRule cache flow:\n1. Render backend request\n2. Build cache key: credential | endpoint | path | rule-name | backend-hash | upstream-vars-hash\n3. Cache lookup\n4. If HIT: Restore outcome + exported variables, skip backend\n5. If MISS: Execute backend, evaluate conditions, render exports, cache result\n\nOnly cache when:\n- Rule has backendApi defined\n- Outcome is pass or fail (never error)\n- TTL \u003e 0 (after ceiling calculation)\n\nDependencies: PassCtrl-42, PassCtrl-43, PassCtrl-45, PassCtrl-46a\n\nFiles to modify:\n- internal/runtime/rule_execution_agent.go (evaluateRule, constructor)\n- internal/runtime/rule_cache.go (buildBackendHash implementation)\n- internal/runtime/runtime.go (pass cache to agent)","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T10:30:19.363649123Z","updated_at":"2025-10-27T22:31:22.34017211Z","closed_at":"2025-10-27T22:31:22.34017211Z","dependencies":[{"issue_id":"PassCtrl-52","depends_on_id":"PassCtrl-51","type":"blocks","created_at":"2025-10-27T10:30:34.743630994Z","created_by":"l0p7"}]}
{"id":"PassCtrl-6","title":"Refactor unit tests to testify table style","description":"Convert existing *_test.go files to table-driven tests using testify assertions; leave httpexpect integration coverage untouched.","notes":"Router suite now drives handlers via httpexpect with table-driven cases; runtime rule execution tests rely on mockery HTTP doer. go test ./... and golangci-lint run ./... both pass after refactor.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T02:57:30.834109901Z","updated_at":"2025-10-19T03:43:26.745446511Z","closed_at":"2025-10-19T03:43:26.745446511Z","dependencies":[{"issue_id":"PassCtrl-6","depends_on_id":"PassCtrl-5","type":"blocks","created_at":"2025-10-18T02:57:44.518656442Z","created_by":"l0p7"},{"issue_id":"PassCtrl-6","depends_on_id":"PassCtrl-14","type":"blocks","created_at":"2025-10-19T02:07:44.453202791Z","created_by":"l0p7"},{"issue_id":"PassCtrl-6","depends_on_id":"PassCtrl-15","type":"blocks","created_at":"2025-10-19T02:07:47.132071684Z","created_by":"l0p7"},{"issue_id":"PassCtrl-6","depends_on_id":"PassCtrl-16","type":"blocks","created_at":"2025-10-19T02:07:49.931643083Z","created_by":"l0p7"},{"issue_id":"PassCtrl-6","depends_on_id":"PassCtrl-17","type":"blocks","created_at":"2025-10-19T02:07:52.395117952Z","created_by":"l0p7"}]}
{"id":"PassCtrl-7","title":"Document testing conventions","description":"Update AGENTS.md and design/testing docs to capture testify + table-driven guidance and note continued httpexpect usage.","notes":"Documented testing conventions in AGENTS.md and design/technical-requirements.md (table cases, testify usage, httpexpect, mockery workflow, validation commands).","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T02:57:40.613474731Z","updated_at":"2025-10-19T04:47:07.654164501Z","closed_at":"2025-10-19T04:47:07.654164501Z","dependencies":[{"issue_id":"PassCtrl-7","depends_on_id":"PassCtrl-6","type":"blocks","created_at":"2025-10-18T02:57:47.598121822Z","created_by":"l0p7"}]}
{"id":"PassCtrl-8","title":"Establish mockery configuration","description":"Add repo-level .mockery.yaml aligned with testify/mock naming conventions and document regeneration command.","notes":"Draft .mockery.yaml committed and referenced in docs; ready for review before generating mocks.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T04:26:28.798194568Z","updated_at":"2025-10-18T04:27:14.253062635Z","closed_at":"2025-10-18T04:27:14.253071706Z"}
{"id":"PassCtrl-9","title":"Audit remaining tests for testify/mocks","description":"Inventory packages still using hand-rolled stubs or stdlib assertions; propose mockery targets and table-driven rewrites.","notes":"Documented audit results in notes/testing-migration.md (package checklist + mockery candidates).","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T05:07:34.814951029Z","updated_at":"2025-10-18T05:29:25.174053512Z","closed_at":"2025-10-18T05:29:25.174053512Z","dependencies":[{"issue_id":"PassCtrl-9","depends_on_id":"PassCtrl-5","type":"blocks","created_at":"2025-10-18T05:07:59.309175322Z","created_by":"l0p7"}]}
