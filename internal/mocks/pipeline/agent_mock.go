// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pipelinemocks

import (
	"context"
	"net/http"

	"github.com/l0p7/passctrl/internal/runtime/pipeline"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAgent creates a new instance of MockAgent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgent {
	mock := &MockAgent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAgent is an autogenerated mock type for the Agent type
type MockAgent struct {
	mock.Mock
}

type MockAgent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgent) EXPECT() *MockAgent_Expecter {
	return &MockAgent_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockAgent
func (_mock *MockAgent) Execute(context1 context.Context, request *http.Request, state *pipeline.State) pipeline.Result {
	ret := _mock.Called(context1, request, state)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 pipeline.Result
	if returnFunc, ok := ret.Get(0).(func(context.Context, *http.Request, *pipeline.State) pipeline.Result); ok {
		r0 = returnFunc(context1, request, state)
	} else {
		r0 = ret.Get(0).(pipeline.Result)
	}
	return r0
}

// MockAgent_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAgent_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - context1 context.Context
//   - request *http.Request
//   - state *pipeline.State
func (_e *MockAgent_Expecter) Execute(context1 interface{}, request interface{}, state interface{}) *MockAgent_Execute_Call {
	return &MockAgent_Execute_Call{Call: _e.mock.On("Execute", context1, request, state)}
}

func (_c *MockAgent_Execute_Call) Run(run func(context1 context.Context, request *http.Request, state *pipeline.State)) *MockAgent_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 *pipeline.State
		if args[2] != nil {
			arg2 = args[2].(*pipeline.State)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAgent_Execute_Call) Return(result pipeline.Result) *MockAgent_Execute_Call {
	_c.Call.Return(result)
	return _c
}

func (_c *MockAgent_Execute_Call) RunAndReturn(run func(context1 context.Context, request *http.Request, state *pipeline.State) pipeline.Result) *MockAgent_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockAgent
func (_mock *MockAgent) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAgent_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockAgent_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockAgent_Expecter) Name() *MockAgent_Name_Call {
	return &MockAgent_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockAgent_Name_Call) Run(run func()) *MockAgent_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_Name_Call) Return(s string) *MockAgent_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAgent_Name_Call) RunAndReturn(run func() string) *MockAgent_Name_Call {
	_c.Call.Return(run)
	return _c
}
