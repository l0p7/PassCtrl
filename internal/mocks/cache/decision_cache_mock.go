// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cachemocks

import (
	"context"

	"github.com/l0p7/passctrl/internal/runtime/cache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDecisionCache creates a new instance of MockDecisionCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecisionCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecisionCache {
	mock := &MockDecisionCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDecisionCache is an autogenerated mock type for the DecisionCache type
type MockDecisionCache struct {
	mock.Mock
}

type MockDecisionCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecisionCache) EXPECT() *MockDecisionCache_Expecter {
	return &MockDecisionCache_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDecisionCache
func (_mock *MockDecisionCache) Close(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDecisionCache_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDecisionCache_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDecisionCache_Expecter) Close(ctx interface{}) *MockDecisionCache_Close_Call {
	return &MockDecisionCache_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockDecisionCache_Close_Call) Run(run func(ctx context.Context)) *MockDecisionCache_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDecisionCache_Close_Call) Return(err error) *MockDecisionCache_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDecisionCache_Close_Call) RunAndReturn(run func(ctx context.Context) error) *MockDecisionCache_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrefix provides a mock function for the type MockDecisionCache
func (_mock *MockDecisionCache) DeletePrefix(ctx context.Context, prefix string) error {
	ret := _mock.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrefix")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, prefix)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDecisionCache_DeletePrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrefix'
type MockDecisionCache_DeletePrefix_Call struct {
	*mock.Call
}

// DeletePrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockDecisionCache_Expecter) DeletePrefix(ctx interface{}, prefix interface{}) *MockDecisionCache_DeletePrefix_Call {
	return &MockDecisionCache_DeletePrefix_Call{Call: _e.mock.On("DeletePrefix", ctx, prefix)}
}

func (_c *MockDecisionCache_DeletePrefix_Call) Run(run func(ctx context.Context, prefix string)) *MockDecisionCache_DeletePrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDecisionCache_DeletePrefix_Call) Return(err error) *MockDecisionCache_DeletePrefix_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDecisionCache_DeletePrefix_Call) RunAndReturn(run func(ctx context.Context, prefix string) error) *MockDecisionCache_DeletePrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Lookup provides a mock function for the type MockDecisionCache
func (_mock *MockDecisionCache) Lookup(ctx context.Context, key string) (cache.Entry, bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 cache.Entry
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (cache.Entry, bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) cache.Entry); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(cache.Entry)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, key)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDecisionCache_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type MockDecisionCache_Lookup_Call struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockDecisionCache_Expecter) Lookup(ctx interface{}, key interface{}) *MockDecisionCache_Lookup_Call {
	return &MockDecisionCache_Lookup_Call{Call: _e.mock.On("Lookup", ctx, key)}
}

func (_c *MockDecisionCache_Lookup_Call) Run(run func(ctx context.Context, key string)) *MockDecisionCache_Lookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDecisionCache_Lookup_Call) Return(entry cache.Entry, b bool, err error) *MockDecisionCache_Lookup_Call {
	_c.Call.Return(entry, b, err)
	return _c
}

func (_c *MockDecisionCache_Lookup_Call) RunAndReturn(run func(ctx context.Context, key string) (cache.Entry, bool, error)) *MockDecisionCache_Lookup_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function for the type MockDecisionCache
func (_mock *MockDecisionCache) Size(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDecisionCache_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockDecisionCache_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDecisionCache_Expecter) Size(ctx interface{}) *MockDecisionCache_Size_Call {
	return &MockDecisionCache_Size_Call{Call: _e.mock.On("Size", ctx)}
}

func (_c *MockDecisionCache_Size_Call) Run(run func(ctx context.Context)) *MockDecisionCache_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDecisionCache_Size_Call) Return(n int64, err error) *MockDecisionCache_Size_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDecisionCache_Size_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockDecisionCache_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MockDecisionCache
func (_mock *MockDecisionCache) Store(ctx context.Context, key string, entry cache.Entry) error {
	ret := _mock.Called(ctx, key, entry)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, cache.Entry) error); ok {
		r0 = returnFunc(ctx, key, entry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDecisionCache_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockDecisionCache_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - entry cache.Entry
func (_e *MockDecisionCache_Expecter) Store(ctx interface{}, key interface{}, entry interface{}) *MockDecisionCache_Store_Call {
	return &MockDecisionCache_Store_Call{Call: _e.mock.On("Store", ctx, key, entry)}
}

func (_c *MockDecisionCache_Store_Call) Run(run func(ctx context.Context, key string, entry cache.Entry)) *MockDecisionCache_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 cache.Entry
		if args[2] != nil {
			arg2 = args[2].(cache.Entry)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDecisionCache_Store_Call) Return(err error) *MockDecisionCache_Store_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDecisionCache_Store_Call) RunAndReturn(run func(ctx context.Context, key string, entry cache.Entry) error) *MockDecisionCache_Store_Call {
	_c.Call.Return(run)
	return _c
}
