// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package servermocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPipelineHTTP creates a new instance of MockPipelineHTTP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPipelineHTTP(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPipelineHTTP {
	mock := &MockPipelineHTTP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPipelineHTTP is an autogenerated mock type for the PipelineHTTP type
type MockPipelineHTTP struct {
	mock.Mock
}

type MockPipelineHTTP_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPipelineHTTP) EXPECT() *MockPipelineHTTP_Expecter {
	return &MockPipelineHTTP_Expecter{mock: &_m.Mock}
}

// EndpointExists provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) EndpointExists(s string) bool {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for EndpointExists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPipelineHTTP_EndpointExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndpointExists'
type MockPipelineHTTP_EndpointExists_Call struct {
	*mock.Call
}

// EndpointExists is a helper method to define mock.On call
//   - s string
func (_e *MockPipelineHTTP_Expecter) EndpointExists(s interface{}) *MockPipelineHTTP_EndpointExists_Call {
	return &MockPipelineHTTP_EndpointExists_Call{Call: _e.mock.On("EndpointExists", s)}
}

func (_c *MockPipelineHTTP_EndpointExists_Call) Run(run func(s string)) *MockPipelineHTTP_EndpointExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_EndpointExists_Call) Return(b bool) *MockPipelineHTTP_EndpointExists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPipelineHTTP_EndpointExists_Call) RunAndReturn(run func(s string) bool) *MockPipelineHTTP_EndpointExists_Call {
	_c.Call.Return(run)
	return _c
}

// RequestWithEndpointHint provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) RequestWithEndpointHint(request *http.Request, s string) *http.Request {
	ret := _mock.Called(request, s)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithEndpointHint")
	}

	var r0 *http.Request
	if returnFunc, ok := ret.Get(0).(func(*http.Request, string) *http.Request); ok {
		r0 = returnFunc(request, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}
	return r0
}

// MockPipelineHTTP_RequestWithEndpointHint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestWithEndpointHint'
type MockPipelineHTTP_RequestWithEndpointHint_Call struct {
	*mock.Call
}

// RequestWithEndpointHint is a helper method to define mock.On call
//   - request *http.Request
//   - s string
func (_e *MockPipelineHTTP_Expecter) RequestWithEndpointHint(request interface{}, s interface{}) *MockPipelineHTTP_RequestWithEndpointHint_Call {
	return &MockPipelineHTTP_RequestWithEndpointHint_Call{Call: _e.mock.On("RequestWithEndpointHint", request, s)}
}

func (_c *MockPipelineHTTP_RequestWithEndpointHint_Call) Run(run func(request *http.Request, s string)) *MockPipelineHTTP_RequestWithEndpointHint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_RequestWithEndpointHint_Call) Return(request1 *http.Request) *MockPipelineHTTP_RequestWithEndpointHint_Call {
	_c.Call.Return(request1)
	return _c
}

func (_c *MockPipelineHTTP_RequestWithEndpointHint_Call) RunAndReturn(run func(request *http.Request, s string) *http.Request) *MockPipelineHTTP_RequestWithEndpointHint_Call {
	_c.Call.Return(run)
	return _c
}

// ServeAuth provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) ServeAuth(responseWriter http.ResponseWriter, request *http.Request) {
	_mock.Called(responseWriter, request)
	return
}

// MockPipelineHTTP_ServeAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeAuth'
type MockPipelineHTTP_ServeAuth_Call struct {
	*mock.Call
}

// ServeAuth is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - request *http.Request
func (_e *MockPipelineHTTP_Expecter) ServeAuth(responseWriter interface{}, request interface{}) *MockPipelineHTTP_ServeAuth_Call {
	return &MockPipelineHTTP_ServeAuth_Call{Call: _e.mock.On("ServeAuth", responseWriter, request)}
}

func (_c *MockPipelineHTTP_ServeAuth_Call) Run(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_ServeAuth_Call) Return() *MockPipelineHTTP_ServeAuth_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPipelineHTTP_ServeAuth_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeAuth_Call {
	_c.Run(run)
	return _c
}

// ServeExplain provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) ServeExplain(responseWriter http.ResponseWriter, request *http.Request) {
	_mock.Called(responseWriter, request)
	return
}

// MockPipelineHTTP_ServeExplain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeExplain'
type MockPipelineHTTP_ServeExplain_Call struct {
	*mock.Call
}

// ServeExplain is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - request *http.Request
func (_e *MockPipelineHTTP_Expecter) ServeExplain(responseWriter interface{}, request interface{}) *MockPipelineHTTP_ServeExplain_Call {
	return &MockPipelineHTTP_ServeExplain_Call{Call: _e.mock.On("ServeExplain", responseWriter, request)}
}

func (_c *MockPipelineHTTP_ServeExplain_Call) Run(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeExplain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_ServeExplain_Call) Return() *MockPipelineHTTP_ServeExplain_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPipelineHTTP_ServeExplain_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeExplain_Call {
	_c.Run(run)
	return _c
}

// ServeHealth provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) ServeHealth(responseWriter http.ResponseWriter, request *http.Request) {
	_mock.Called(responseWriter, request)
	return
}

// MockPipelineHTTP_ServeHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHealth'
type MockPipelineHTTP_ServeHealth_Call struct {
	*mock.Call
}

// ServeHealth is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - request *http.Request
func (_e *MockPipelineHTTP_Expecter) ServeHealth(responseWriter interface{}, request interface{}) *MockPipelineHTTP_ServeHealth_Call {
	return &MockPipelineHTTP_ServeHealth_Call{Call: _e.mock.On("ServeHealth", responseWriter, request)}
}

func (_c *MockPipelineHTTP_ServeHealth_Call) Run(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_ServeHealth_Call) Return() *MockPipelineHTTP_ServeHealth_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPipelineHTTP_ServeHealth_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockPipelineHTTP_ServeHealth_Call {
	_c.Run(run)
	return _c
}

// WriteError provides a mock function for the type MockPipelineHTTP
func (_mock *MockPipelineHTTP) WriteError(responseWriter http.ResponseWriter, n int, s string) {
	_mock.Called(responseWriter, n, s)
	return
}

// MockPipelineHTTP_WriteError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteError'
type MockPipelineHTTP_WriteError_Call struct {
	*mock.Call
}

// WriteError is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - n int
//   - s string
func (_e *MockPipelineHTTP_Expecter) WriteError(responseWriter interface{}, n interface{}, s interface{}) *MockPipelineHTTP_WriteError_Call {
	return &MockPipelineHTTP_WriteError_Call{Call: _e.mock.On("WriteError", responseWriter, n, s)}
}

func (_c *MockPipelineHTTP_WriteError_Call) Run(run func(responseWriter http.ResponseWriter, n int, s string)) *MockPipelineHTTP_WriteError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPipelineHTTP_WriteError_Call) Return() *MockPipelineHTTP_WriteError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPipelineHTTP_WriteError_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, n int, s string)) *MockPipelineHTTP_WriteError_Call {
	_c.Run(run)
	return _c
}
