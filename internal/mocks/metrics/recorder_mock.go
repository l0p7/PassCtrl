// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metricsmocks

import (
	"net/http"
	"time"

	"github.com/l0p7/passctrl/internal/metrics"
	"github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRecorder creates a new instance of MockRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecorder {
	mock := &MockRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecorder is an autogenerated mock type for the Recorder type
type MockRecorder struct {
	mock.Mock
}

type MockRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecorder) EXPECT() *MockRecorder_Expecter {
	return &MockRecorder_Expecter{mock: &_m.Mock}
}

// Gatherer provides a mock function for the type MockRecorder
func (_mock *MockRecorder) Gatherer() prometheus.Gatherer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gatherer")
	}

	var r0 prometheus.Gatherer
	if returnFunc, ok := ret.Get(0).(func() prometheus.Gatherer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Gatherer)
		}
	}
	return r0
}

// MockRecorder_Gatherer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gatherer'
type MockRecorder_Gatherer_Call struct {
	*mock.Call
}

// Gatherer is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) Gatherer() *MockRecorder_Gatherer_Call {
	return &MockRecorder_Gatherer_Call{Call: _e.mock.On("Gatherer")}
}

func (_c *MockRecorder_Gatherer_Call) Run(run func()) *MockRecorder_Gatherer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_Gatherer_Call) Return(gatherer prometheus.Gatherer) *MockRecorder_Gatherer_Call {
	_c.Call.Return(gatherer)
	return _c
}

func (_c *MockRecorder_Gatherer_Call) RunAndReturn(run func() prometheus.Gatherer) *MockRecorder_Gatherer_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function for the type MockRecorder
func (_mock *MockRecorder) Handler() http.Handler {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// MockRecorder_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockRecorder_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockRecorder_Expecter) Handler() *MockRecorder_Handler_Call {
	return &MockRecorder_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockRecorder_Handler_Call) Run(run func()) *MockRecorder_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecorder_Handler_Call) Return(handler http.Handler) *MockRecorder_Handler_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *MockRecorder_Handler_Call) RunAndReturn(run func() http.Handler) *MockRecorder_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// ObserveAuth provides a mock function for the type MockRecorder
func (_mock *MockRecorder) ObserveAuth(endpoint string, outcome string, statusCode int, fromCache bool, duration time.Duration) {
	_mock.Called(endpoint, outcome, statusCode, fromCache, duration)
	return
}

// MockRecorder_ObserveAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveAuth'
type MockRecorder_ObserveAuth_Call struct {
	*mock.Call
}

// ObserveAuth is a helper method to define mock.On call
//   - endpoint string
//   - outcome string
//   - statusCode int
//   - fromCache bool
//   - duration time.Duration
func (_e *MockRecorder_Expecter) ObserveAuth(endpoint interface{}, outcome interface{}, statusCode interface{}, fromCache interface{}, duration interface{}) *MockRecorder_ObserveAuth_Call {
	return &MockRecorder_ObserveAuth_Call{Call: _e.mock.On("ObserveAuth", endpoint, outcome, statusCode, fromCache, duration)}
}

func (_c *MockRecorder_ObserveAuth_Call) Run(run func(endpoint string, outcome string, statusCode int, fromCache bool, duration time.Duration)) *MockRecorder_ObserveAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		var arg4 time.Duration
		if args[4] != nil {
			arg4 = args[4].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRecorder_ObserveAuth_Call) Return() *MockRecorder_ObserveAuth_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecorder_ObserveAuth_Call) RunAndReturn(run func(endpoint string, outcome string, statusCode int, fromCache bool, duration time.Duration)) *MockRecorder_ObserveAuth_Call {
	_c.Run(run)
	return _c
}

// ObserveCacheLookup provides a mock function for the type MockRecorder
func (_mock *MockRecorder) ObserveCacheLookup(endpoint string, result metrics.CacheLookupOutcome, duration time.Duration) {
	_mock.Called(endpoint, result, duration)
	return
}

// MockRecorder_ObserveCacheLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveCacheLookup'
type MockRecorder_ObserveCacheLookup_Call struct {
	*mock.Call
}

// ObserveCacheLookup is a helper method to define mock.On call
//   - endpoint string
//   - result metrics.CacheLookupOutcome
//   - duration time.Duration
func (_e *MockRecorder_Expecter) ObserveCacheLookup(endpoint interface{}, result interface{}, duration interface{}) *MockRecorder_ObserveCacheLookup_Call {
	return &MockRecorder_ObserveCacheLookup_Call{Call: _e.mock.On("ObserveCacheLookup", endpoint, result, duration)}
}

func (_c *MockRecorder_ObserveCacheLookup_Call) Run(run func(endpoint string, result metrics.CacheLookupOutcome, duration time.Duration)) *MockRecorder_ObserveCacheLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 metrics.CacheLookupOutcome
		if args[1] != nil {
			arg1 = args[1].(metrics.CacheLookupOutcome)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRecorder_ObserveCacheLookup_Call) Return() *MockRecorder_ObserveCacheLookup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecorder_ObserveCacheLookup_Call) RunAndReturn(run func(endpoint string, result metrics.CacheLookupOutcome, duration time.Duration)) *MockRecorder_ObserveCacheLookup_Call {
	_c.Run(run)
	return _c
}

// ObserveCacheStore provides a mock function for the type MockRecorder
func (_mock *MockRecorder) ObserveCacheStore(endpoint string, result metrics.CacheStoreOutcome, duration time.Duration) {
	_mock.Called(endpoint, result, duration)
	return
}

// MockRecorder_ObserveCacheStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveCacheStore'
type MockRecorder_ObserveCacheStore_Call struct {
	*mock.Call
}

// ObserveCacheStore is a helper method to define mock.On call
//   - endpoint string
//   - result metrics.CacheStoreOutcome
//   - duration time.Duration
func (_e *MockRecorder_Expecter) ObserveCacheStore(endpoint interface{}, result interface{}, duration interface{}) *MockRecorder_ObserveCacheStore_Call {
	return &MockRecorder_ObserveCacheStore_Call{Call: _e.mock.On("ObserveCacheStore", endpoint, result, duration)}
}

func (_c *MockRecorder_ObserveCacheStore_Call) Run(run func(endpoint string, result metrics.CacheStoreOutcome, duration time.Duration)) *MockRecorder_ObserveCacheStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 metrics.CacheStoreOutcome
		if args[1] != nil {
			arg1 = args[1].(metrics.CacheStoreOutcome)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRecorder_ObserveCacheStore_Call) Return() *MockRecorder_ObserveCacheStore_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecorder_ObserveCacheStore_Call) RunAndReturn(run func(endpoint string, result metrics.CacheStoreOutcome, duration time.Duration)) *MockRecorder_ObserveCacheStore_Call {
	_c.Run(run)
	return _c
}
