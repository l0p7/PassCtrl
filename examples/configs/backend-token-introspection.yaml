# Bearer token introspection example that validates inbound requests against an
# identity service before granting access. This configuration demonstrates
# forward proxy enforcement, curated request headers, rule-level caching, and
# CEL-based conditional logic aligned with the staged documentation.
server:
  listen:
    address: "0.0.0.0"
    port: 8080
  logging:
    level: debug
    format: json
  rules:
    rulesFolder: ""
    rulesFile: ""
  cache:
    backend: memory
    ttlSeconds: 60
    keySalt: "demo"
    epoch: 0
  templates:
    templatesFolder: "./templates"
    templatesAllowEnv: false

endpoints:
  introspection:
    description: "Validates bearer tokens via the identity API before granting access."
    authentication:
      required: true
      allow:
        authorization: ["bearer"]
      challenge:
        type: bearer
        realm: "Identity"
    forwardProxyPolicy:
      trustedProxyIPs: ["10.0.0.0/8", "192.168.0.0/16"]
      developmentMode: false
    forwardRequestPolicy:
      forwardProxyHeaders: true
      headers:
        allow: ["x-request-id", "x-forwarded-for", "x-forwarded-proto"]
        strip: ["authorization"]
        custom:
          x-trace-id: "{{ index .raw.headers \"x-request-id\" }}"
      query:
        allow: ["trace_id"]
        strip: []
        custom: {}
    rules:
      - name: introspect-bearer-token
      - name: require-active-subscription
    responsePolicy:
      pass:
        status: 200
      fail:
        status: 403
        body: |
          {
            "error": "access denied"
          }
      error:
        status: 502
        body: |
          {
            "error": "identity service unavailable"
          }
    cache:
      resultTTL: "120s"

rules:
  introspect-bearer-token:
    description: "Calls the identity service to validate the inbound bearer token."
    auth:
      - type: bearer
        forwardAs:
          type: bearer
          token: "{{ .auth.input.token }}"
    backendApi:
      url: "https://identity.internal/api/v1/introspect"
      method: POST
      forwardProxyHeaders: true
      headers:
        allow: []
        strip: []
        custom:
          authorization: "Bearer {{ .auth.input.token }}"
          content-type: "application/json"
      body: |
        {
          "token": "{{ .auth.input.token }}"
        }
      acceptedStatuses: [200]
    conditions:
      pass:
        - backend.status == 200 && lookup(backend.body, "active") == true
      fail:
        - backend.status == 200 && lookup(backend.body, "active") == false
      error:
        - backend.status >= 500
    variables:
      global:
        validated_token:
          from: backend.body.token
        subscription_plan:
          from: backend.body.plan
        subject:
          from: backend.body.sub
    cache:
      passTTL: "90s"
      failTTL: "0s"
      followCacheControl: true

  require-active-subscription:
    description: "Ensures the identity API flagged the account as active."
    conditions:
      pass:
        - lookup(vars.global, "validated_token") != "" && lookup(vars.global, "subscription_plan") in ["plus", "enterprise"]
      fail:
        - lookup(vars.global, "subscription_plan") == "expired"
        - lookup(vars.global, "validated_token") == ""
    responses:
      fail:
        headers:
          custom:
            X-PassCtrl-Reason: "subscription check failed"
            X-PassCtrl-Plan: "{{ index .vars.global \"subscription_plan\" }}"
    cache:
      passTTL: "0s"
      failTTL: "0s"
